[{
  "title": "How To Enable SignalR for Angular Dev Server",
  "text": "I was trying to figure this out for hours so I figured I should share.With the VS2022 Angular ASP.NET Core project template (at least as of a month or so ago), if you just add SignalR it's not going to work correctly.Following advise on the internet, you'd find you have to edit the Angular proxy.conf.js (added by the VS template) to add any urls you need to get proxied to your .net app and set the ws property to true in the PROXY_CONFIG:Example, before:const PROXY_CONFIG = [\n  {\n    context: [\n      \"/api\"\n    ],\n    target: target,\n    secure: false,\n    headers: [\n      Connection: 'Keep-Alive'\n    ]\n  }\n];\nAfter:const PROXY_CONFIG = [\n  {\n    context: [\n      \"/api\",\n      \"/mySignalRHub\"\n    ],\n    target: target,\n    secure: false,\n    headers: [\n      Connection: 'Keep-Alive'\n    ]\n    ws: true\n  }\n];\nAnd this worked... but at some point after some package upgrades, websockets no longer worked in SignalR and it started falling back to using normal HTTP connections.Eventually I figured out the culprit. You can't use Keep-Alive with WebSocket connections. At least not with SignalR.const PROXY_CONFIG = [\n  {\n    context: [\n      \"/api\",\n      \"/mySignalRHub\"\n    ],\n    target: target,\n    secure: false,\n    ws: true\n  }\n];\norconst PROXY_CONFIG = [\n  {\n    context: [\n      \"/api\"\n    ],\n    target: target,\n    secure: false,\n    headers: [\n      Connection: 'Keep-Alive'\n    ]\n  },\n  {\n    context: [\n      \"/mySignalRHub\"\n    ],\n    target: target,\n    secure: false,\n    ws: true\n  }\n];\nHopefully this will save someone some pain.",
  "URL": "https://www.reddit.com/r/dotnet/comments/y1mi6p/how_to_enable_signalr_for_angular_dev_server/"
},
{
  "title": "Creating a NuGet package with static dependencies AND a native assembly wrapper?",
  "text": "I have created several simple NuGet packages and published them to my Azure DevOps feed for internal use. These other packages work fine and are in use in many projects. I am, however, currently stuck on a package that has two gotchas:the package needs to reference a .net wrapper assembly that references a c++ native dll. And both the dlls (native and wrapper) needs to end up in the package consumer's build output directory.the package needs to include a configuration (.cfg text file) file in the package consumer's build output directory.I have tried to add the native .dll and the .cfg file to my project and set the \"Copy to Output Directory\" option to \"Copy if newer\". That seems to include these two files in the Visual Studio created .nupkg file. They are placed in the /content and /contentFiles/any/net6.0 folders. I also added the wrapper assembly as a project reference. But that is not placed in the nupkg file.Also, when I install the package into the consumer project none of the above end up in the output folder. Only my package assembly is in the consumer's output folder. So the consumer project builds, but fails at runtime.The package is a net6.0 sdk style class library project. The consumer is a net6.0 web api project with PackageReference nodes.Package .csproj file for reference:<Project Sdk=\"Microsoft.NET.Sdk\">\n\n\t<PropertyGroup>\n\t\t<TargetFramework>net6.0</TargetFramework>\n\t\t<ImplicitUsings>enable</ImplicitUsings>\n\t\t<Nullable>enable</Nullable>\n\t\t<GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n\t\t<Description>My service.</Description>\n\t\t<Authors>Me</Authors>\n\t\t<Company>My Company</Company>\n\t\t<FileVersion>$(AssemblyVersion)</FileVersion>\n\t\t<Version>$(AssemblyVersion)</Version>\n\t</PropertyGroup>\n\n\t<PropertyGroup>\n\t\t<GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n\t\t<Deterministic>false</Deterministic>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t\t<Content Include=\"the.cfg\">\n\t\t\t<PackageCopyToOutput>true</PackageCopyToOutput>\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n\t\t</Content>\n\t\t<Content Include=\"native.dll\">\n\t\t\t<PackageCopyToOutput>true</PackageCopyToOutput>\n\t\t\t<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n\t\t</Content>\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t\t<PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"6.0.0\" />\n\t\t<PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"6.0.2\" />\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t\t<Reference Include=\"nativewrapper\">\n\t\t\t<HintPath>nativewrapper.dll</HintPath>\n\t\t\t<Private>True</Private>\n\t\t</Reference>\n\t</ItemGroup>\n\n</Project>\nThe consumer project file:<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n\t<PropertyGroup>\n\t\t<TargetFramework>net6.0</TargetFramework>\n\t\t<Nullable>enable</Nullable>\n\t\t<ImplicitUsings>enable</ImplicitUsings>\n\t</PropertyGroup>\n\n\t<ItemGroup>\n\t\t<PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"6.0.2\" />\n\t\t<PackageReference Include=\"My.Service\" Version=\"1.0.0-CI-20221011-195234\" />\n\t\t<PackageReference Include=\"Serilog.AspNetCore\" Version=\"6.1.0-dev-00285\" />\n\t\t<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"4.1.1-dev-00896\" />\n\t\t<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.1-dev-00947\" />\n\t</ItemGroup>\n\n</Project>\nThe visual studio created nuspec file:<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>My.Service</id>\n    <version>1.0.0</version>\n    <authors>Me</authors>\n    <description>My service.</description>\n    <dependencies>\n      <group targetFramework=\"net6.0\">\n        <dependency id=\"Microsoft.Extensions.DependencyInjection.Abstractions\" version=\"6.0.0\" exclude=\"Build,Analyzers\" />\n        <dependency id=\"Microsoft.Extensions.Logging.Abstractions\" version=\"6.0.2\" exclude=\"Build,Analyzers\" />\n      </group>\n    </dependencies>\n    <contentFiles>\n      <files include=\"any/net6.0/the.cfg\" buildAction=\"Content\" copyToOutput=\"true\" />\n      <files include=\"any/net6.0/native.dll\" buildAction=\"Content\" copyToOutput=\"true\" />\n    </contentFiles>\n  </metadata>\n  <files>\n    <file src=\"C:\\Git\\NuGet\\source\\My.Service\\bin\\Debug\\net6.0\\My.Service.dll\" target=\"lib\\net6.0\\My.Service.dll\" />\n    <file src=\"C:\\Git\\NuGet\\source\\My.Service\\the.cfg\" target=\"content\\the.cfg\" />\n    <file src=\"C:\\Git\\NuGet\\source\\My.Service\\the.cfg\" target=\"contentFiles\\any\\net6.0\\the.cfg\" />\n    <file src=\"C:\\Git\\NuGet\\source\\My.Service\\native.dll\" target=\"content\\native.dll\" />\n    <file src=\"C:\\Git\\NuGet\\source\\My.Service\\native.dll\" target=\"contentFiles\\any\\net6.0\\native.dll\" />\n  </files>\n</package>\nNot sure what else to do here. Any suggestions?",
  "URL": "https://www.reddit.com/r/dotnet/comments/y1jph8/creating_a_nuget_package_with_static_dependencies/"
},
{
  "title": "Can someone maybe explain something to me or help me out.",
  "text": "Basically I have a application where people can make orders. I was wondering how do I save the data from when the customer starts ordering to when the customer is done ordering and the order has to be saved in the database.Or should I just immediatly create a new order and just update the order by adding new things whenever the customer chooses something new?",
  "URL": "https://www.reddit.com/r/dotnet/comments/y1fv48/can_someone_maybe_explain_something_to_me_or_help/"
},
{
  "title": "Proposed library for working with AWS messaging services",
  "text": "I work on the AWS .NET SDK team. We are thinking about building a new .NET library that simplifies the experience of using AWS messaging services like SQS, SNS and EventBridge. The goal of the library is to make an idiomatic experience that removes the undifferentiating code so you only have to focus on business logic.For example if you are processing messages you would just write your handler classpublic class OrderInfoHandler : IMessageHandler<OrderInfo>\n{\n    public async Task<MessageStatus> HandleAsync(MessageEnvelope<OrderReceived> message, CancellationToken cancellationToken = default(CancellationToken))\n    {\n        // Here we're reading from the message within the metadata envelope\n        var productId = message.Message.ProductId;\n        \n        // Here we can do our business logic based on what is in the message\n        await UpdateInventory(productId);\n        await PrintShippingLabel(productId, message.Message.CustomerId);\n\n        // Indicate that OrderInfo has been processed successfully\n        return MessageStatus.Success;\n    }\n}\nor to publish message inject the IMessagePublisher interface and publish messages.[ApiController]\n[Route(\"[controller]\")]\npublic class OrderController : ControllerBase\n{\n    // See later in the design for how this was configured and mapped to the queue\n    private readonly IMessagePublisher _publisher;\n\n    public OrderController(IMessagePublisher publisher)\n    {\n        _publisher = publisher;\n    }\n\n    [HttpPost]\n    public async Task Post([FromBody] OrderInfo orderInfo)\n    {\n        // Add internal metadata to the OrderInfo object \n        // we received, or any other business logic\n        orderInfo.OrderTime = DateTime.UtcNow;\n        orderInfo.OrderStatus = OrderStatus.Recieved;\n\n        // The updated OrderInfo object will also be serialized as the SQS message\n        await _publisher.PublishAsync(orderInfo);\n    }\n}\nIf you use AWS I would appreciate feedback on the proposed design or simply a thumbs up if you want something like this.https://github.com/aws/dotnet/issues/42](https://github.com/aws/dotnet/issues/42",
  "URL": "https://www.reddit.com/r/dotnet/comments/y0ynpz/proposed_library_for_working_with_aws_messaging/"
},
{
  "title": "Methods to force browser cache refresh on Blazor WASM apps",
  "text": "Hi folks, I have a WASM app stored in an AWS S3 bucket and distributed using Cloudfront. I updated a few files recently, invalidated the Cloudfront cache, and after a CTRL + F5 the new files are showing in Chrome.However, as previous visitors won't know that a new version is available, and may not know how to refresh their browser cache (or don't have an easy way to do this because they're using a mobile device), what can I do to automatically invalidate newer files to require they be re-fetched from the host?Research has only thrown up old-fashioned cache-busting solutions such as renaming files with a timestamp to make them seem like new versions, but I can't believe that this incredibly common issue doesn't have a more elegant solution yet, especially in such a modern framework.Some solutions suggest the following in index.htm:<meta http-equiv=\"cache-control\" content=\"max-age=0\" />\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\nbut would this prevent everything from being cached, since the entire app stems from this file? I obviously don't want to force users to redownload the .NET and Blazor runtimes each time I change a few paragraphs of text.",
  "URL": "https://www.reddit.com/r/Blazor/comments/y1cu8d/methods_to_force_browser_cache_refresh_on_blazor/"
},
{
  "title": "Console.ReadKey improvements in .NET 7 on Unix",
  "URL": "https://www.reddit.com/r/dotnet/comments/y12mrq/consolereadkey_improvements_in_net_7_on_unix/"
},
{
  "title": "Methods to force browser cache refresh on Blazor WASM apps",
  "URL": "https://www.reddit.com/r/dotnet/comments/y1cwed/methods_to_force_browser_cache_refresh_on_blazor/"
},
{
  "title": "My first WinUI 3 app. An open-source battery utility for Windows 11/10",
  "URL": "https://www.reddit.com/r/dotnet/comments/y0m0wr/my_first_winui_3_app_an_opensource_battery/"
},
